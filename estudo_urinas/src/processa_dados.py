import streamlit as st
import pandas as pd
import altair as alt
from io import BytesIO

# ‚Äî Fun√ß√µes de categoriza√ß√£o ‚Äî #
def categorize_ac(valor):
    try:
        if isinstance(valor, str):
            v = valor.strip().lower()
            if v.startswith('<'):
                return 'normal (<30 mg/g)'
            if v.startswith('>') or 'over' in v:
                return 'albumin√∫ria manifesta (>300 mg/g)'
            num = float(v)
        else:
            num = float(valor)
    except:
        return None
    if num < 30:
        return 'normal (<30 mg/g)'
    if num <= 300:
        return 'microalbumin√∫ria (30‚Äì300 mg/g)'
    return 'albumin√∫ria manifesta (>300 mg/g)'

def categorize_pc(valor):
    try:
        if isinstance(valor, str):
            v = valor.strip().lower()
            if v.startswith('<'):
                return 'normal (<150 mg/g)'
            if v.startswith('>') or 'over' in v:
                return 'protein√∫ria manifesta (>300 mg/g)'
            num = float(v)
        else:
            num = float(valor)
    except:
        return None
    if num < 150:
        return 'normal (<150 mg/g)'
    if num <= 300:
        return 'microprotein√∫ria (150‚Äì300 mg/g)'
    return 'protein√∫ria manifesta (>300 mg/g)'

def categorize_ref(valor):
    try:
        v = str(valor).strip().lower()
        if v.startswith('<'):
            num = float(v.lstrip('<'))
        elif v.startswith('>') or 'over' in v:
            num = float(v.lstrip('>').replace('over','301'))
        else:
            num = float(v)
    except:
        return None
    if num < 30:
        return 'normal (<30 mg/g)'
    if num <= 300:
        return 'microalbumin√∫ria (30‚Äì300 mg/g)'
    return 'albumin√∫ria manifesta (>300 mg/g)'

# ‚Äî T√≠tulo e uploader ‚Äî #
st.title('An√°lise de Albumina/Creatinina e Prote√≠na/Creatinina')
uploaded = st.file_uploader('Carregue o ficheiro (Excel ou CSV)', type=['xlsx','csv'])
if not uploaded:
    st.info('Por favor, carregue um ficheiro para iniciar o processamento.')
    st.stop()

# ‚Äî Leitura e limpeza ‚Äî #
if uploaded.name.lower().endswith('.csv'):
    df = pd.read_csv(uploaded)
else:
    df = pd.read_excel(uploaded, header=3, engine='openpyxl')

# Eliminar primeira coluna e colunas sem nome
if df.columns.size > 0:
    df = df.iloc[:, 1:]
df = df.loc[:, ~df.columns.str.startswith('Unnamed')]
df.columns = df.columns.str.strip()
df = df.loc[:, df.columns.astype(bool)]

# Renomear colunas chave
df = df.rename(columns={
    'N¬∫ Tubo': 'Tubo',
    '√Årea': '√°rea',
    'A/C Arkray (mg/gCr)': 'ac_arkray',
    'P/C Arkray (mg/gCr)': 'pc_arkray',
    'A/C Sysmex (mg/gCr)': 'ac_sysmex',
    'P/C Sysmex (mg/gCr)': 'pc_sysmex',
    'A/C Cobas (mg/gCr)':  'ac_cobas',
    'P/C Cobas (mg/gCr)':  'pc_cobas'
})

# ‚Äî Categoriza√ß√£o por equipamento ‚Äî #
for dev in ['arkray','sysmex','cobas']:
    if f'ac_{dev}' in df.columns:
        df[f'status_ac_{dev}'] = df[f'ac_{dev}'].apply(categorize_ac)
        df[f'ref_ac_{dev}']    = df[f'ac_{dev}'].apply(categorize_ref)
    if f'pc_{dev}' in df.columns:
        df[f'status_pc_{dev}'] = df[f'pc_{dev}'].apply(categorize_pc)
        df[f'ref_pc_{dev}']    = df[f'pc_{dev}'].apply(categorize_ref)

# ‚Äî Exibir gr√°ficos individuais (Status do equipamento) ‚Äî #
st.header('Distribui√ß√£o por equipamento (Status interno)')
for dev in ['arkray','sysmex','cobas']:
    nome = dev.capitalize()
    if f'status_ac_{dev}' in df.columns:
        st.subheader(f'{nome} ‚Äì Albumina/Creatinina')
        st.bar_chart(df[f'status_ac_{dev}'].value_counts())
    if f'status_pc_{dev}' in df.columns:
        st.subheader(f'{nome} ‚Äì Prote√≠na/Creatinina')
        st.bar_chart(df[f'status_pc_{dev}'].value_counts())

# ‚Äî Gr√°fico de valores por √Årea para Albumina/Creatinina ‚Äî #
st.header('Distribui√ß√£o de A/C por √Årea')

# Definimos as tr√™s categorias
cats_ac = [
    ('Valores abaixo do normal (<30 mg/g)', 'normal (<30 mg/g)'),
    ('Microalbumin√∫ria (30‚Äì300 mg/g)',   'microalbumin√∫ria (30‚Äì300 mg/g)'),
    ('Albumin√∫ria manifesta (>300 mg/g)','albumin√∫ria manifesta (>300 mg/g)')
]

# ‚Äî Valores abaixo do normal (<30) ‚Äî #
st.header('A/C abaixo do normal por √°rea')
area_ac_abaixo = pd.DataFrame({
    dev.capitalize(): df[df[f'status_ac_{dev}']=='normal (<30 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_ac_abaixo)

# ‚Äî Valores microalbumin√∫ria (30‚Äì300) ‚Äî #
st.header('A/C microalbumin√∫ria por √°rea')
area_ac_micro = pd.DataFrame({
    dev.capitalize(): df[df[f'status_ac_{dev}']=='microalbumin√∫ria (30‚Äì300 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_ac_micro)

# ‚Äî Albumin√∫ria manifesta (>300) ‚Äî #
st.header('A/C acima do normal por √°rea')
area_ac_alta = pd.DataFrame({
    dev.capitalize(): df[df[f'status_ac_{dev}']=='albumin√∫ria manifesta (>300 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_ac_alta)

# ‚Äî Gr√°fico de valores por √Årea para Prote√≠na/Creatinina ‚Äî #
st.header('Distribui√ß√£o de P/C por √Årea')

# As categorias agora com limites de P/C
cats_pc = [
    ('Valores abaixo do normal (<150 mg/g)', 'normal (<150 mg/g)'),
    ('Microprotein√∫ria (150‚Äì300 mg/g)',      'microprotein√∫ria (150‚Äì300 mg/g)'),
    ('Protein√∫ria manifesta (>300 mg/g)',    'protein√∫ria manifesta (>300 mg/g)')
]

# ‚Äî P/C abaixo do normal (<150) ‚Äî #
st.header('P/C abaixo do normal por √°rea')
area_pc_abaixo = pd.DataFrame({
    dev.capitalize(): df[df[f'status_pc_{dev}']=='normal (<150 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_pc_abaixo)

# ‚Äî P/C microprotein√∫ria (150‚Äì300) ‚Äî #
st.header('P/C microprotein√∫ria por √°rea')
area_pc_micro = pd.DataFrame({
    dev.capitalize(): df[df[f'status_pc_{dev}']=='microprotein√∫ria (150‚Äì300 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_pc_micro)

# ‚Äî P/C protein√∫ria manifesta (>300) ‚Äî #
st.header('P/C acima do normal por √°rea')
area_pc_alta = pd.DataFrame({
    dev.capitalize(): df[df[f'status_pc_{dev}']=='protein√∫ria manifesta (>300 mg/g)']
                        .groupby('√°rea').size()
    for dev in ['arkray','sysmex','cobas']
}).fillna(0)
st.area_chart(area_pc_alta)


# ‚Äî Amostras discordantes ‚Äî #
st.header('Amostras com categorias totalmente diferentes')
for tipo,label in [('ac','Albumina/Creatinina'), ('pc','Prote√≠na/Creatinina')]:
    st.subheader(label)
    mask = df.apply(lambda r: len({
        r.get(f'status_{tipo}_arkray'),
        r.get(f'status_{tipo}_sysmex'),
        r.get(f'status_{tipo}_cobas')
    })==3, axis=1)
    cols = ['Tubo'] + [f'status_{tipo}_{dev}' for dev in ['arkray','sysmex','cobas']]
    df_diff = df.loc[mask, cols]
    st.write(df_diff if not df_diff.empty else 'Nenhuma amostra com tr√™s categorias diferentes.')

# ‚Äî Transferir dados processados ‚Äî #
towrite = BytesIO()
df.to_excel(towrite, index=False, engine='openpyxl')
towrite.seek(0)
st.download_button(
    'üì• Transferir Excel Processado',
    data=towrite,
    file_name='dados_processados.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)

st.success('Os dados foram processados com sucesso!')  
